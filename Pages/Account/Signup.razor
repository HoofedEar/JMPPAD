@page "/Signup"
@using System.ComponentModel.DataAnnotations
@using JMPPAD.Services
@using Microsoft.AspNetCore.Identity
@attribute [AllowAnonymous]
@inject UserManager<IdentityUser> UserMgr
@inject NavigationManager NavMgr

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardContent>
                    <h2>Sign Up</h2>
                    <MudTextField HelperText="Max. 15 characters" @bind-Value="model.Username" Label="Username" For="@(() => model.Username)"/>
                    <MudTextField @bind-Value="model.Email" Label="Email" InputType="InputType.Email" For="() => model.Email"/>
                    <MudTextField @bind-Value="model.Password" Label="Password" InputType="InputType.Password" For="() => model.Password"/>
                    <MudTextField @bind-Value="model.ConfirmPassword" Label="Confirm Password" InputType="InputType.Password" For="() => model.ConfirmPassword"/>
                    <MudCheckBox @bind-Checked="Terms" Label="Agree to Terms & Conditions" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Login</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Primary">Sign Up</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private bool RegisterAttempt { get; set; }
    private bool Terms { get; set; }
    private string? Error { get; set; }

    SignUpForm model = new();

    public class SignUpForm
    {
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(15, ErrorMessage = "Username can't be more than 15 characters.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please provide a valid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Please confirm your password.")]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; }
    }

    private async Task OnValidSubmit()
    {
        RegisterAttempt = true;
        Error = null;

        if (string.IsNullOrEmpty(model.Email) || string.IsNullOrEmpty(model.Password) || string.IsNullOrEmpty(model.ConfirmPassword))
        {
            Error = "Please fill out all fields.";
            RegisterAttempt = false;
            return;
        }

        var email = new EmailAddressAttribute();
        if (!email.IsValid(model.Email))
        {
            Error = "Invalid email address";
            RegisterAttempt = false;
            return;
        }

        if (!Terms)
        {
            Error = "Please accept the Terms & Conditions";
            RegisterAttempt = false;
            return;
        }

        if (model.Password != model.ConfirmPassword)
        {
            Error = "Passwords do not match";
            RegisterAttempt = false;
            return;
        }

        var validPassword = await UserMgr.PasswordValidators[0].ValidateAsync(UserMgr, null, model.Password);
        if (!validPassword.Succeeded)
        {
            Error = string.Join(Environment.NewLine, validPassword.Errors.Select(i => i.Description));
            RegisterAttempt = false;
            return;
        }

        var emailUsed = await UserMgr.FindByEmailAsync(model.Email);
        if (emailUsed != null)
        {
    // TODO add account recovery stuff
            Error = "That email is already in use!";
            RegisterAttempt = false;
            return;
        }

        var userUsed = await UserMgr.FindByNameAsync(model.Username);
        if (userUsed != null)
        {
            Error = "That username is taken";
            RegisterAttempt = false;
            return;
        }

        if (model.Password == model.ConfirmPassword)
        {
            var key = Guid.NewGuid();
            LoginMiddleware.Logins[key] = new LoginInfo {Username = model.Username, Email = model.Email, Password = model.Password};
            NavMgr.NavigateTo($"/register?key={key}", true);
        }
    }

}